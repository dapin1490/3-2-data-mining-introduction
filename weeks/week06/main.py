import pandas as pd
import numpy as np
import os

if not os.path.exists("data/"):
	os.mkdir("data/")

df1 = pd.DataFrame(np.random.randn(5, 4), columns=list('ABCD'), index=pd.date_range('20190701', periods=5))
print("df1")
print(df1)
print()
print(df1.loc['20190702':'20190704'])
print()
print(df1.iloc[0])
print()
print(df1['A'])
print()
print()

ser1 = pd.Series(np.random.randn(4), index=list('abcd'))
print("ser1")
print(ser1)
print()
print(ser1.loc['b'])
print()
print(ser1.loc['c'])
print()
ser1.loc['c'] = 0
print(ser1)
print()
ser1[2:] = 30
print(ser1)
print()
print("----------------------------")
print()

df2 = pd.DataFrame(np.random.randn(5, 4), columns=list('ABCD'), index=list("abcde"))
print("df2")
print(df2)
print()
print(df2.loc[['a', 'b', 'd'], :])
print()
print(df2.loc[['a', 'b', 'd'], "B":"D"])
print()
print(df2.loc[['a', 'b', 'd'], ["B", "D"]])
print()
print()

ser2 = pd.Series(list("abcde"), index=[0, 3, 2, 5, 4])
print("ser2")
print(ser2)
print()
print(ser2.loc[0:2])
print()
print(ser2.iloc[0:2])
print()
print()
ser3 = pd.Series(list("abcde"))
print("ser3")
print(ser3)
print()
print(ser3.loc[0:2])
print()
ser4 = ser2.sort_index()
print("ser4")
print(ser4)
print()
ser5 = ser2.sort_values()
print("ser5")
print(ser5)
print()
print("-------------------")
print()

df3 = pd.DataFrame(np.random.randn(5, 4), columns=list(range(0, 8, 2)), index=list(range(0, 10, 2)))
print("df3")
print(df3)
print()
print(df3.loc[0:4, 2:6])
print()
print(df3.iloc[0:3, 1:4])
print()
print(df3.iloc[0:3])
print()
print(df3.iloc[:, 1:])
print()
print(df3.iloc[[0, 3], [1, 2]])
print()
print()

df4 = pd.DataFrame(np.random.randn(5, 4), columns=list("ABCE"), index=list("abcde"))
print("df4")
print(df4)
print()
print(df4.loc[lambda df: df.A > 0])
print()
print(df4.loc[:, lambda df: df.loc["a"] > 0])
print()
print("------------------------------")
print()

ser6 = pd.Series(np.arange(3))
print("ser6")
print(ser6)
print()
ser6[5] = 7  # 없는 인덱스에 값 넣으면 그 인덱스만 생김, append와 다름
print(ser6)
print()
for i in range(3, 5):
	ser6[i] = 0
print(ser6)
print()
print()

df5 = pd.DataFrame(np.arange(9).reshape(3, 3), columns=list("ABC"))
print("df5")
print(df5)
print()
df5.loc[:, "T"] = df5.loc[:, "A"]
print(df5)
print()
data1 = list("AWESOME")
df5.loc[:, "G"] = pd.Series(data1)
print(df5)
print()
data2 = [33, 33, 33, "S", 33]
df5.loc[0, :] = pd.Series(data2)
print(df5)
print()
df5.loc[0, :] = data2
print(df5)
print()
print(df5["A"])
print()
print(df5.A)  # 영어만 가능
print()
print(df5.isna())
print()
print(df5.notna())
print()
print("-----------------------")
print()
print()

d1 = {"one": [1, 2, 3], "two": [4, 5, 6]}
df6 = pd.DataFrame(d1, index=list("abc"))
df7 = df6.copy()

df7.loc["d"] = np.nan
df7.iloc[1:2, 1:2] = np.nan
print("df6, df7")
print(df6)
print()
print(df7)
print()

df67 = df6 + df7
df67["three"] = np.nan
print("df67")
print(df67)
print()
print(df67.sum())
print()
print(df67.prod())
print()
print(df67.mean())
print()
print(df67.std())
print()
print(df67.max())
print()
print(df67["one"].sum())
print()
print(df67["one"].quantile())
print()
print(df67["one"].var())
print()
print()

arr = np.array(np.arange(0, 9).reshape(3, 3))
print("arr")
print(arr)
print()
print(arr[:, 0].sum())
print()
print(arr[:, 0].mean())
print()
print(arr[:, 0].std())
print()
print(arr[:, 0].max())
print()
print()

print(df67.fillna(df67.mean()))
print()
print(df67.fillna(0))
print()
print()

df8 = pd.DataFrame([[np.nan, 2, 0, np.nan], [3, 4, np.nan, 1], [np.nan, 5, np.nan, 2], [np.nan, 1, 2, 3]],
                   columns=list("ABCD"))
print("df8")
print(df8)
print()
print(df8.fillna(0))
print()
print(df8.fillna(method="ffill"))  # 앞에서 가져올 값이 없으면 안 채워짐
print()
print(df8.fillna(method="bfill"))  # 뒤에서 가져올 값이 없으면 안 채워짐
print()
val = {"A": 11, "C": 33, "D": 44}
print(df8.fillna(val, limit=1))
print()
print("----------------------")
print()

data = {'name': ['haena', 'naeun', 'una', 'bum', 'suho'],
        'age': [30, 27, 28, 23, 18],
        'address': ['dogok', 'suwon', 'mapo', 'ilsan', 'yeoyi'],
        'grade': ['A', 'B', 'C', 'B', 'A'],
        'score': [100, 88, 73, 83, 95]}

df9 = pd.DataFrame(data, columns=['name', 'age', 'address', 'score', 'grade'])
print("df9")
print(df9)
print()
print(df9.to_csv("data/student_grade.csv"))
print()
df99 = pd.read_csv("data/student_grade.csv", header=None, nrows=3)
print("df99")
print(df99)
print()
df99 = pd.read_csv("data/student_grade.csv", index_col=0)
print(df99)
print()
print(df99.iloc[0:5, 1:6])
print()
df99 = pd.read_csv("data/student_grade.csv", index_col=["age"])
print(df99)
print()
df999 = pd.read_csv("data/student_grade.csv", names=["No", "name", "age", "address", "score", "grade"])
print("df999")
print(df999)
print()
print(df999.iloc[1:6])
print()
df_sep = pd.read_csv("data/student_grade.csv", sep='|', index_col=0)
print("df_sep")
print(df_sep)
print()
print(df9.to_csv("data/student_grade_sep.csv", sep='|'))
df_sep = pd.read_csv("data/student_grade_sep.csv", sep='|', index_col=0)
print("df_sep")
print(df_sep)
print()
print()

dfj = pd.DataFrame([['a', 'b'], ['c', 'd']], index=['row1', 'row2'], columns=['col1', 'col2'])
print("dfj")
print(dfj)
print()
print(dfj.to_json())
print()
print(dfj.to_json(orient='split'))
print()
print(dfj.to_json(orient='columns'))
print()
print(dfj.to_json(orient='values'))
print()
print(dfj.to_json(orient='table'))
print()
print(dfj.to_json("data/happy_json.json"))
print()
dfjr = pd.read_json("data/happy_json.json")
print("dfjr")
print(dfjr)
print()
print()

url = 'https://www.fdic.gov/resources/resolutions/bank-failures/failed-bank-list/'
dfh = pd.read_html(url)
print("dfh")
print(dfh)
print()
print()

dfhtml = pd.DataFrame(np.random.randn(5, 4))
print(dfhtml.to_html())
print()
print("------------------------")
print()

df672 = pd.DataFrame(np.arange(0, 100).reshape(20, 5))
print("df672")
print(df672.quantile([0.25, 0.55, 0.75]))
print()

np22 = np.arange(0, 100).reshape(20, 5)
print("np22")
print(np.quantile(np22, [0.25, 0.55, 0.75]))
print()
print(np.quantile(np22[:, 0], [0.25, 0.55, 0.75]))
print()
print(np.var(np22))
print()
