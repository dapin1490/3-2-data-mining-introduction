"""
1. "seoul_ems.csv" 파일이 존재한다. 해당 파일을 읽고 항목별 홀수년도 데이터만 존재하는 행렬로 데이터 처리를 하시요. 다만 하기 조건을 따르시요. (7점)
- Null값의 경우 0으로 대체
- 총계 삭제 필요
- 10개 미만의 데이터 경우 10개로 재구성
"""

"""
2. 하기와 같은 코드가 존재한다. 해당 코드와 동일한 기능을 제공하는 코드를 수정 업데이트하여 제출하시요. 다만 아래의 조건을 따르시요. 참고로 코드 최적화를 위해서 list comprehension을 검색 및 활용 권장한다. (7점)
- 수정 업데이트시 수정 가능 영역 부분을 5줄 이하로 작성하여야 한다
- ;을 활용한 다중 코드 한줄화는 금지한다.

import numpy as np

data = [(22, 10, 6, 57, "ulsan"), (21, 10, 7, 56, "jeonbuk"), (10, 16, 12, 52, "daegu"), (11, 13, 14, 43, "seoul"), (11, 11, 16, 43, "suwon")]

<------------여기서부터 수정 가능------------------>

a = np.zeros(5, dtype=[('win', 'i4'), ('draw', 'i4'), ('lose', 'i4'), ('score', 'i4'), ('team', 'S10')])
for i in range(0, len(data)):
	a[i] = data[i]

b = np.zeros(5, dtype=[('point', 'i4'), ('rate', 'f4'), ('team', 'S10')])

for i in range(0, len(data)):
	b[i][0] = a[i][0] * 3 + a[i][1] * 1
	b[i][1] = a[i][0] / (a[i][0] + a[i][1] + a[i][2])
	b[i][2] = a[i][4]

<------------수정 가능 영역 끝------------------>

print(a)
print(b)
print(a.dtype)
print(b.dtype)
"""

"""
3. 하기와 같은 코드가 존재한다. 해당 코드 아랫부분에 추가로 9줄 이하로 작성하여 하기 그림과 동일한 출력을 생성하시오. (7점)
- 단 ;을 활용한 여러줄의 한줄 축약은 금지한다.

import pandas as pd
import numpy as np

df1_data = np.ones((5, 6))
df1 = pd.DataFrame(df1_data, index=list(range(0, 10, 2)), columns=list(range(0, 12, 2)))
df2_data = np.ones((6, 5))
df2 = pd.DataFrame(df2_data, index=list(range(0, 12, 2)), columns=list(range(0, 10, 2)))
df3 = df1 + df2

최종 출력:
     0    2    4    6    8   10
0   2.0  NaN  2.0  NaN  2.0 NaN
2   NaN  NaN  2.0  NaN  2.0 NaN
4   2.0  2.0  2.0  NaN  2.0 NaN
6   NaN  NaN  NaN  NaN  2.0 NaN
8   2.0  2.0  2.0  2.0  2.0 NaN
10  NaN  NaN  NaN  NaN  NaN NaN
"""

"""
4. 하기와 같은 랜덤숫자들이 존재한다. 1) 하기 랜덤숫자의 평균, 분산, 표준편차, 중위값,하위 20%, 80%값을 numpy와 pandas로 각각 구하고 2) 개별 값의 numpy와 pandas 값의 차이를 계산해서 출력하시요. 다만 하기 조건들을 따르시오. (7점)
- 1)과 2) 출력시 numpy, pandas 적용 여부 출력 동반 필요
- pandas의 describe 사용 금지

41, 195, 23, 111, 130, 120, 76, 117, 178, 113, 74, 186, 144, 92, 74, 15, 14, 36, 71, 171, 156, 108, 32, 143, 65, 35, 58, 54, 153, 21, 108, 67, 67, 9, 89, 112, 84, 77, 37, 137, 94, 18, 65, 155, 174, 54, 62, 190, 121, 84, 6, 194, 55, 43, 22, 121, 178, 49, 23, 169, 88, 113, 53, 110, 11, 15, 197, 103, 119, 67, 90, 135, 152, 128, 0, 90, 54, 174, 69, 162, 169, 84, 190, 94, 97, 77, 190, 158, 31, 17, 152, 12, 177, 35, 1, 117, 52, 185, 51, 95
"""

"""
5. "seoul_ems_test.csv"가 존재한다. 해당 csv의 데이터내 값에 대한 검증을 위해서 해당 데이터를 읽고 총계과 실제 데이터값의 합이 동일한지 여부에 대해서 파이썬 코드를 작성하여 검증을 진행하시요. 다시 말씀드리면 1)총계값과 2012년 이전~2017년도 데이터간의 합산 간 구별로 동일한지 틀린지 여부를 체크하고, 2) 틀리다면 총계값과 2012년 이전~2017년도 데이터 합산값간의 차이를 출력하시요. (7점)
"""